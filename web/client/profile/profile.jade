template(name="settings")
  +profile

template(name="profile")
  .container
    .row.clearfix
      .col-md-2.column
        +public_profile
      .col-md-10.column
        //- +dockers
        h2 EnvUserConfigs:
        +profilePageEnvUserConfigsTable
        +profilePageEnvConfigsForm userConfigId=userConfigId
        h2 Servers' Instance:
        +profilePageDockerInstancesTable


template(name="profilePageEnvConfigsForm")
  if envConfigsSchema
    +quickForm id="setEnvUserConfigs" schema=envConfigsSchema type="method" meteormethod="setEnvConfigsById" template="bootstrap3-inline" label-class="sr-only" afFieldInput-placeholder="schemaLabel"


template(name="profilePageEnvUserConfigsTable")
  +reactiveTable settings=settings


template(name="profilePageEnvConfigTypesTableRelatedCoursesField")
  +EnvConfigTypesRelatedCoursesField _id=configTypeId


template(name="profilePageEnvUserConfigsTableConfigDataField")
  ul
    each envs
      li {{key}}={{value}}


template(name="profilePageEnvUserConfigsTableEditBtnField")
  botton.envUserConfigEditBtn.btn.btn-warning(userConfigId="{{_id}}") Edit



template(name="profilePageDockerServerContainersTable")
  +reactiveTable settings=settings


template(name="profilePageDockerInstancesTable")
  +reactiveTable settings=settings

template(name="profilePageDockerInstancesTableEnvField")
  ul
    each containerConfigs.Env
      li {{this}}

template(name="profilePageDockerInstancesTableRemoveBtnField")
  botton.removeInstanceBtn.btn.btn-warning(instanceId="{{_id}}") Remove


template(name="profilePageDockerInstancesTableQuotaField")
  ul
    li Type: {{quotaType}}
    if isPersonal
      li Expired At: {{expiredAt}}
    else
      li Name: {{groupData.name}}



template(name="profilePageDockerInstancesTableLimitField")
  ul
    li NCPU: {{limit.NCPU}}
    li Memory: {{limit.Memory}}



template(name="public_profile")
  img(src="{{user.profile.photo.photo_link}}").img-rounded
  +quickForm id="profileUpdate" schema="profileSchema" type="method" meteormethod="updateProfile" doc=user.profile

//  hr
//  .show-profile
//    if user.profile.email
//      h3 email: {{user.profile.email}}
//        input.btn.btn-primary(value="edit" type="button")
//    else
//      h3 email: please set email
//          input.btn.btn-primary(value="edit" type="button")
//
//  .profile-editor
//    +autoForm id="profileUpdate" schema="SettingSchema" type="method" meteormethod="updateProfile"
//      if afFieldIsInvalid name="email"
//        strong {{{afFieldMessage name="email"}}}
//      else
//        p new email
//      +afFieldInput name="email"
//      br
//      input.btn.btn-success(type="submit")
//- +accountSet
//- template(name="accountSet")
//-   +bound

//- template(name="bound")
//-   input.btn.connect.github(type="button", value="connect github")

//-   input.btn.connect.twitter(type="button", value="connect twitter")
//-   input.btn.connect.facebook(type="button", value="connect facebook")
//-   input.btn.connect.meetup(type="button", value="connect meetup")
